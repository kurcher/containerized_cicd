import telebot
import os
import threading
import time
import schedule
from datetime import datetime


BOT_TOKEN = os.getenv("BOT_TOKEN")    

bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}
DAILY_GOAL = 2.0  


@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    user_data[user_id] = {'drank': 0.0}
    bot.send_message(user_id, "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±—É–¥—É –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø–∏—Ç–∏ –≤–æ–¥—É –∫–æ–∂–Ω—ñ 2.5 –≥–æ–¥–∏–Ω–∏!\n"
                              "–í–≤–µ–¥–∏ —Å–∫—ñ–ª—å–∫–∏ –≤–æ–¥–∏ —Ç–∏ –≤–∏–ø–∏–≤, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.3")


@bot.message_handler(commands=['progress'])
def handle_progress(message):
    user_id = message.chat.id
    drank = user_data.get(user_id, {}).get('drank', 0.0)
    bot.send_message(user_id, f"üíß –ü—Ä–æ–≥—Ä–µ—Å: {drank:.2f}/{DAILY_GOAL} –ª")


@bot.message_handler(func=lambda message: True)
def handle_water_input(message):
    user_id = message.chat.id
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
        user_data.setdefault(user_id, {'drank': 0.0})
        user_data[user_id]['drank'] += amount
        total = user_data[user_id]['drank']
        bot.send_message(user_id, f"‚úÖ –î–æ–¥–∞–Ω–æ {amount:.2f} –ª. –í—Å—å–æ–≥–æ: {total:.2f}/{DAILY_GOAL} –ª")
    except ValueError:
        bot.send_message(user_id, "üö´ –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É –ª—ñ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.3")


def send_reminders():
    for user_id in user_data:
        bot.send_message(user_id, "üö∞ –ß–∞—Å –ø–∏—Ç–∏ –≤–æ–¥—É!")


def reset_daily():
    for user_id in user_data:
        user_data[user_id]['drank'] = 0.0
        bot.send_message(user_id, "üïõ –ù–æ–≤–∏–π –¥–µ–Ω—å! –õ—ñ—á–∏–ª—å–Ω–∏–∫ –æ–±–Ω—É–ª–µ–Ω–æ.")


def schedule_runner():
    schedule.every(2.5).hours.do(send_reminders)
    schedule.every().day.at("00:00").do(reset_daily)

    while True:
        schedule.run_pending()
        time.sleep(1)


threading.Thread(target=schedule_runner, daemon=True).start()

bot.polling()
